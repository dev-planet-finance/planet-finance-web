generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PortfolioHolding {
  id                      String   @id @default(uuid())
  userId                  String
  user                    User     @relation(fields: [userId], references: [id])

  symbol                  String
  cryptoName              String?
  investmentType          InvestmentType
  quantity                Decimal
  averagePrice            Decimal?
  currentPrice            Decimal?
  totalDividends          Decimal?
  dividendReinvestEnabled Boolean @default(false)
  splitAdjustments        Json?

  platform                String?
  brokerAccountId         String?
  region                  String?
  industry                String?
  assetClass              String?
  strategy                String?
  isActive                Boolean  @default(true)
  notes                   String?

  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  transactions            PortfolioTransaction[]
}

model PortfolioTransaction {
  id                  String   @id @default(uuid())
  userId              String
  user                User     @relation(fields: [userId], references: [id])
  holdingId           String?
  holding             PortfolioHolding? @relation(fields: [holdingId], references: [id])

  action              TransactionAction
  symbol              String
  cryptoName          String?

  quantity            Decimal?
  pricePerUnit        Decimal?
  fiatFee             Decimal?
  cryptoFee           Decimal?
  currency            String
  fxRate              Decimal?

  platform            String?
  assetClass          String?
  sector              String?
  country             String?
  strategy            String?
  accountHolder       String?

  totalCost           Decimal?
  costBasisMethod     CostBasisMethod?
  notes               String?

  fromAccount         String? // NEW
  toAccount           String? // NEW
  isAutoGenerated     Boolean? @default(false) // NEW

  date                DateTime
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model User {
  id          String                  @id @default(uuid())
  email       String                  @unique
  name        String?
  createdAt   DateTime                @default(now())
  updatedAt   DateTime                @updatedAt

  transactions PortfolioTransaction[]
  holdings     PortfolioHolding[]
  budgetTransactions BudgetTransaction[]
  debts Debt[]         
}

enum InvestmentType {
  Stock
  ETF
  Crypto
  Option
  Forex
  Cash
}

enum TransactionActionType {
  Buy
  Sell
  DRIP
  CashDividend
  CashDeposit
  CashWithdrawal
  CashFee
  ParcelFee
  Split
  FreeAsset
  TransferOut
  TransferIn
  CashInterest
  CryptoInterest
}

enum CostBasisMethod {
  FIFO
  LIFO
  AVG
}

enum TransactionAction {
  Buy
  Sell
  DRIP
  CashDividend
  CashDeposit
  CashWithdrawal
  CashFee
  ParcelFee
  Split
  FreeAsset
  TransferOut
  TransferIn
  CashInterest
  CryptoInterest
}

model BudgetTransaction {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])

  transactionType BudgetTransactionType @map("type")
  subType     TransferSubType?

  amount        Decimal
  currency      String
  fxRate        Decimal?
  category      String?
  account       String?
  accountHolder String?
  platform      String?
  fromAccount   String?
  toAccount     String?
  notes         String?

  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum BudgetTransactionType {
  Income
  Expense
  Transfer
}

enum TransferSubType {
  Local
  International
}

model Debt {
  id             String   @id @default(uuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])

  name           String
  lender         String?
  originalAmount Decimal
  termMonths     Int  
  startDate      DateTime
  interestRate   Decimal   // Initial interest rate
  isVariable     Boolean   @default(false)
  compounding    CompoundingFrequency @default(Monthly)
  type           DebtType

  notes          String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  transactions   DebtTransaction[]
  variableRates  DebtInterestRate[]
}

model DebtTransaction {
  id        String   @id @default(uuid())
  debtId    String
  debt      Debt     @relation(fields: [debtId], references: [id])

  amount    Decimal
  interest  Decimal?
  principal Decimal?
  notes     String?
  date      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DebtInterestRate {
  id        String   @id @default(uuid())
  debtId    String
  debt      Debt     @relation(fields: [debtId], references: [id])

  rate      Decimal
  startDate DateTime
  notes     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum DebtType {
  Mortgage
  StudentLoan
  CreditCard
  PersonalLoan
  CarLoan
  Other
}

enum CompoundingFrequency {
  Daily
  Weekly
  Fortnightly
  Monthly
  Quarterly
  Annually
}
